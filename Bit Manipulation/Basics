
operator


AND operator
all true -> true
1 false -> false



OR operator
all false -> false
1 true -> true



XOR operator
no of 1s is even -> 0
no of 1s is odd -> 1



SHIFT operator
>> RIGHT SHIFT [x >> k  = x / (2^k)]

13 >> 1
1101 -> 110

13 >> 2
1101 -> 11


<< LEFT SHIFT [num << k  = num * (2^k)]

13 << 1
1101 -> 11010


NOT (~) operator

1. flip
2. Check -

if(-) compute 2's complement
else stop

0000000....101
















 